package com.allen.loltool.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.allen.loltool.greendao.HeroListItem;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "HERO_LIST_ITEM".
*/
public class HeroListItemDao extends AbstractDao<HeroListItem, Long> {

    public static final String TABLENAME = "HERO_LIST_ITEM";

    /**
     * Properties of entity HeroListItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Total_pages = new Property(1, Integer.class, "total_pages", false, "TOTAL_PAGES");
        public final static Property Limit = new Property(2, Integer.class, "limit", false, "LIMIT");
        public final static Property Total = new Property(3, Integer.class, "total", false, "TOTAL");
        public final static Property Page = new Property(4, Integer.class, "page", false, "PAGE");
        public final static Property Version = new Property(5, String.class, "version", false, "VERSION");
        public final static Property En_name = new Property(6, String.class, "en_name", false, "EN_NAME");
        public final static Property Name = new Property(7, String.class, "name", false, "NAME");
        public final static Property Img = new Property(8, String.class, "img", false, "IMG");
        public final static Property Money = new Property(9, String.class, "money", false, "MONEY");
        public final static Property Coin = new Property(10, String.class, "coin", false, "COIN");
        public final static Property Heroid = new Property(11, String.class, "heroid", false, "HEROID");
        public final static Property Newmoney = new Property(12, String.class, "newmoney", false, "NEWMONEY");
        public final static Property Newhero = new Property(13, String.class, "newhero", false, "NEWHERO");
    };


    public HeroListItemDao(DaoConfig config) {
        super(config);
    }
    
    public HeroListItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"HERO_LIST_ITEM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TOTAL_PAGES\" INTEGER," + // 1: total_pages
                "\"LIMIT\" INTEGER," + // 2: limit
                "\"TOTAL\" INTEGER," + // 3: total
                "\"PAGE\" INTEGER," + // 4: page
                "\"VERSION\" TEXT," + // 5: version
                "\"EN_NAME\" TEXT," + // 6: en_name
                "\"NAME\" TEXT," + // 7: name
                "\"IMG\" TEXT," + // 8: img
                "\"MONEY\" TEXT," + // 9: money
                "\"COIN\" TEXT," + // 10: coin
                "\"HEROID\" TEXT," + // 11: heroid
                "\"NEWMONEY\" TEXT," + // 12: newmoney
                "\"NEWHERO\" TEXT);"); // 13: newhero
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"HERO_LIST_ITEM\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, HeroListItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer total_pages = entity.getTotal_pages();
        if (total_pages != null) {
            stmt.bindLong(2, total_pages);
        }
 
        Integer limit = entity.getLimit();
        if (limit != null) {
            stmt.bindLong(3, limit);
        }
 
        Integer total = entity.getTotal();
        if (total != null) {
            stmt.bindLong(4, total);
        }
 
        Integer page = entity.getPage();
        if (page != null) {
            stmt.bindLong(5, page);
        }
 
        String version = entity.getVersion();
        if (version != null) {
            stmt.bindString(6, version);
        }
 
        String en_name = entity.getEn_name();
        if (en_name != null) {
            stmt.bindString(7, en_name);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(8, name);
        }
 
        String img = entity.getImg();
        if (img != null) {
            stmt.bindString(9, img);
        }
 
        String money = entity.getMoney();
        if (money != null) {
            stmt.bindString(10, money);
        }
 
        String coin = entity.getCoin();
        if (coin != null) {
            stmt.bindString(11, coin);
        }
 
        String heroid = entity.getHeroid();
        if (heroid != null) {
            stmt.bindString(12, heroid);
        }
 
        String newmoney = entity.getNewmoney();
        if (newmoney != null) {
            stmt.bindString(13, newmoney);
        }
 
        String newhero = entity.getNewhero();
        if (newhero != null) {
            stmt.bindString(14, newhero);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public HeroListItem readEntity(Cursor cursor, int offset) {
        HeroListItem entity = new HeroListItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // total_pages
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // limit
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // total
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // page
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // version
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // en_name
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // name
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // img
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // money
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // coin
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // heroid
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // newmoney
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // newhero
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, HeroListItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTotal_pages(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setLimit(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setTotal(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setPage(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setVersion(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setEn_name(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setImg(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMoney(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setCoin(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setHeroid(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setNewmoney(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setNewhero(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(HeroListItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(HeroListItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
